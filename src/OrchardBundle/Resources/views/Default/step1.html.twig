{% extends '::step-base.html.twig' %}

{% block body %}

  <div class="row step-1">
    <div class="col-xs-12 col-md-5 col-lg-5">
      <h1 class="display-3">Paso 1</h1>
      <form>
        <div class="form-group">
          <label for="form-name">¿Cómo se llama tu huerto?</label>
          <input type="text" class="form-control" id="form-name" placeholder="Nombre de tu huerto">
        </div>
        <div class="form-group">
          <label for="form-address">¿Dónde está tu huerto?<small id="fileHelp" class="form-text text-muted"><i>Mueve el marcador para seleccionar la entrada a tu huerto.</i></small></label>

          <input type="text" id="orchard-town" hidden="hidden">
          <input type="text" id="orchard-street" hidden="hidden">
          <input type="text" id="orchard-number" hidden="hidden">
          <input type="text" id="orchard-zipcode" hidden="hidden">
          <input type="text" id="orchard-geometry" hidden="hidden">

        </div>
      </form>
      
      <div class="fixed-buttons">
        <button type="button" class="btn btn-secondary col-xs-6 col-sm-6 col-md-6 col-lg-6 ">Atrás</button>
        <button id="btn-siguiente" type="button" class="btn btn-primary col-xs-6 col-sm-6 col-md-6 col-lg-6 ">Siguiente</button>
      </div>

    </div>

    <div class="map col-xs-12 col-md-7 col-lg-7">
      <div id="map" class="map"></div>
    </div>
  

  </div>

{% endblock %}


{% block javascripts %}

  <script type="text/javascript">

    $('#btn-siguiente').on('click', function() {
      var form =  {
        id: $('#orchard-id').val(),
        name: $('#orchard-name').val(),
        town: $('#orchard-town').val(),
        street: $('#orchard-street').val(),
        number: $('#orchard-number').val(),
        zipcode: $('#orchard-zipcode').val(),
        geometry: $('#orchard-geometry').val()
      };

      $.ajax({
        type: 'POST',
        dataType: 'json',
        url: '/orchard/insert',
        data: form,
        success: function(data) {
          $('input[id=orchard-id]').val(data.id);
        }
      });

    });

    var position;

    var circle;

    var polygon;

    var marker;

    var map = L.map('map');

    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    map.setView([39.4077013, -0.5015955], 12);

    navigator.geolocation.getCurrentPosition(success, error, options);

    var options = {
      enableHighAccuracy: true,
      timeout: 5000,
      maximumAge: 0
    };

    function success(pos) {
      var crd = pos.coords;

      console.log('Your current position is:');
      console.log('Latitude : ' + crd.latitude);
      console.log('Longitude: ' + crd.longitude);
      console.log('More or less ' + crd.accuracy + ' meters.');

      setMap(crd);
    };

    function error(err) {
      console.warn('ERROR(' + err.code + '): ' + err.message);
      setMap();
    };

    if (navigator.geolocation) {
      position = navigator.geolocation.getCurrentPosition(setPosition);
    }

    function setMap(crd){

      if(crd != undefined) {
        map.setView([crd.latitude, crd.longitude], 12);
      }else{
        map.setView([39.4077013, -0.5015955], 12);
      }

      L.drawLocal = {
        draw: {
          toolbar: {
              // #TODO: this should be reorganized where actions are nested in actions
              // ex: actions.undo  or actions.cancel
              actions: {
                title: 'Cancelar dibujo',
                text: 'Cancelar'
              },
              finish: {
                title: 'Terminar el dibujo',
                text: 'Terminar'
              },
              undo: {
                title: 'Eliminar el último punto dibujado',
                text: 'Eliminar el último punto'
              },
              buttons: {
                polyline: 'Dibuja una polilínea',
                polygon: 'Dibuja un polígono!',
                rectangle: 'Dibuja un rectángulo!',
                circle: 'Dibuja un círculo!',
                marker: 'Dibuja un marcador!'
              }
            },
            handlers: {
              circle: {
                tooltip: {
                  start: 'Click and drag to draw circle.'
                },
                radius: 'Radius'
              },
              marker: {
                tooltip: {
                  start: 'Click map to place marker.'
                }
              },
              polygon: {
                tooltip: {
                  start: 'Haz clic para empezar a dibujar la forma.',
                  cont: 'Haz clic para continuar dibujando la forma.',
                  end: 'Haz clic en primer punto para cerrar esta forma.'
                }
              },
              polyline: {
                error: '<strong>Error:</strong> shape edges cannot cross!',
                tooltip: {
                  start: 'Click to start drawing line.',
                  cont: 'Click to continue drawing line.',
                  end: 'Click last point to finish line.'
                }
              },
              rectangle: {
                tooltip: {
                  start: 'Click and drag to draw rectangle.'
                }
              },
              simpleshape: {
                tooltip: {
                  end: 'Release mouse to finish drawing.'
                }
              }
            }
          },
          edit: {
            toolbar: {
              actions: {
                save: {
                  title: 'Guardar cambios.',
                  text: 'Guardar'
                },
                cancel: {
                  title: 'Cancelar la edición, descarta todos los cambios.',
                  text: 'Cancelar'
                }
              },
              buttons: {
                edit: 'Editar capas.',
                editDisabled: 'No hay capas que editar.',
                remove: 'Eliminar capas.',
                removeDisabled: 'No hay capas que eliminar.'
              }
            },
            handlers: {
              edit: {
                tooltip: {
                  text: 'Arrastre los puntos o marcadores para editar la forma.',
                  subtext: 'Haga clic en cancelar para deshacer los cambios.'
                }
              },
              remove: {
                tooltip: {
                  text: 'Haga clic en una forma para eliminar'
                }
              }
            }
          }
        };

  // Initialise the FeatureGroup to store editable layers
  var drawnItems = new L.FeatureGroup();
  map.addLayer(drawnItems);

  // Initialise the draw control and pass it the FeatureGroup of editable layers
  var drawControl = new L.Control.Draw({
    draw: {
      marker: false,
      circle: false,
      polyline: false,
      rectangle: false,
      polygon: {
        allowIntersection: false,
        showArea: true
      }
    },
    edit: {
      featureGroup: drawnItems
    }
  });
  map.addControl(drawControl);

  

  map.on('draw:drawstart', function (e) {
    var type = e.layerType,
    layer = e.layer;

    if(polygon != null) {
      map.removeLayer(polygon);
    }

    if(marker != null) {
      map.removeLayer(marker);
    }

    if(circle != null) {
      map.removeLayer(circle);
    }
  });

  map.on('draw:created', function (e) {
    var type = e.layerType,
    layer = e.layer;

    if (type === 'marker') {
          // Do marker specific actions
        }

        polygon = layer;

      // Do whatever else you need to. (save to db, add to map etc)
      map.addLayer(layer);

      drawnItems.addLayer(layer);

      marker = L.marker([layer.getBounds().getCenter().lat, layer.getBounds().getCenter().lng],
        {draggable: true}
        ).on('dragend', function() { onDragEnd(marker); }).addTo(map);

      marker.on('dragstart', function() {
        if(circle != null) {
          map.removeLayer(circle);
        }
      });

      drawnItems.addLayer(marker);

      var latlng = marker.getLatLng();

    //console.log('lat '+latlng.lat+", lng "+latlng.lng);

    $.getJSON('https://search.mapzen.com/v1/reverse?api_key=mapzen-9gW9cQ&point.lat='+latlng.lat+'&point.lon='+latlng.lng+'&size=1&layers=address&boundary.country=ES', function(data, status, xhr) {
      if(data.features[0] == undefined){
        if(circle != null) {
          map.removeLayer(circle);
        }
        marker.bindPopup('No se han encontrado resultados.').openPopup();
      }else{
        marker.bindPopup(data.features[0].properties.label).openPopup();
        if(data.features[0].properties.locality != null){
          if(circle != null) {
            map.removeLayer(circle);
          }
          circle = L.circle([latlng.lat, latlng.lng], data.features[0].properties.distance*1000).addTo(map);
          drawnItems.addLayer(circle);

          //Guardamos address del marker en campo dirección del huerto o separamos los datos y la guardamos por separado (Calle, número, localidad, cp).
          //Después guardamos el poligono como string en el campo geometry del huerto
          var forma = layer.toGeoJSON()
          var forma = JSON.stringify(forma);

          var poligono = {
            town: data.features[0].properties.locality,
            street: data.features[0].properties.street,
            number: data.features[0].properties.housenumber,
            zipCode: data.features[0].properties.postalcode,
            geometry: forma
          }

          $.ajax({
            type: "POST",
            dataType: 'json',
            url: '/orchard/new',
            data: poligono,
            success: function(data) {
              alert('Polígono guardado correctamente')
            }
          });
        }else{
          if(circle != null) {
            map.removeLayer(circle);
          }
          circle = L.circle([latlng.lat, latlng.lng], data.features[0].properties.distance*1000).addTo(map);
          drawnItems.addLayer(circle);

          //Guardamos address del marker en campo dirección del huerto o separamos los datos y la guardamos por separado (Calle, número, localidad, cp).
          //Después guardamos el poligono como string en el campo geometry del huerto
          var forma = layer.toGeoJSON();
          var forma = JSON.stringify(forma);
          console.log(forma);

          var poligono = {
            town: data.features[0].properties.localadmin,
            street: data.features[0].properties.street,
            number: data.features[0].properties.housenumber,
            zipCode: data.features[0].properties.postalcode,
            geometry: forma
          }

          $.ajax({
            type: "POST",
            dataType: 'json',
            url: '/orchard/new',
            data: poligono,
            success: function(data) {
              alert('Polígono guardado correctamente')
            }
          });
        }
        //alert(data.features[0].properties.label);
      }
    });
  });

  var options = {
    markers: {draggable :true},
    layers: 'address',
    'boundary.country': 'ES',
    sources: 'oa'
  };

  var geocoder = L.control.geocoder('mapzen-9gW9cQ', options).addTo(map);

  document.querySelector('.leaflet-pelias-input').placeholder = "Busca tu dirección";

  document.querySelector('.leaflet-control-zoom-in').title = "Acercarse";

  document.querySelector('.leaflet-control-zoom-out').title = "Alejarse";

  geocoder.on('select', function (e) {

    $('.leaflet-pelias-control').removeClass('leaflet-pelias-expanded');

    if(drawnItems.getLayers() != null) {
      map.removeLayer(drawnItems);
    }

    marker = geocoder.markers[0];

    marker.on('dragend', function() { onDragEnd(marker); });

    marker.on('dragstart', function() {
      if(circle != null) {
        map.removeLayer(circle);
      }
    });

    var latlng = marker.getLatLng();

    //console.log('lat '+latlng.lat+", lng "+latlng.lng);

    $.getJSON('https://search.mapzen.com/v1/reverse?api_key=mapzen-9gW9cQ&point.lat='+latlng.lat+'&point.lon='+latlng.lng+'&size=1&layers=address&boundary.country=ES', function(data, status, xhr) {
      if(data.features[0] == undefined){
        if(circle != null) {
          map.removeLayer(circle);
        }
        marker.bindPopup('No se han encontrado resultados.').openPopup();
      }else{
        marker.bindPopup(data.features[0].properties.label).openPopup();
        if(data.features[0].properties.locality != null){
          if(circle != null) {
            map.removeLayer(circle);
          }
          circle = L.circle([latlng.lat, latlng.lng], data.features[0].properties.distance*1000).addTo(map);
          drawnItems.addLayer(circle);
        }else{
          if(circle != null) {
            map.removeLayer(circle);
          }
          circle = L.circle([latlng.lat, latlng.lng], data.features[0].properties.distance*1000).addTo(map);
          drawnItems.addLayer(circle);
        }
        //alert(data.features[0].properties.label);
      }
    });

    //marker.bindPopup("<b>Evento sobre patatas</b><br>Saber más.");

    //console.log('You’ve selected', e.feature.geometry.coordinates[0], ', ', e.feature.geometry.coordinates[1]);
  });

  geocoder.on('reset', function (e) {
    if(circle != null) {
      map.removeLayer(circle);
    }
  });

  function onDragEnd(marker) {
    var latlng = marker.getLatLng();

      //console.log('lat '+latlng.lat+", lng "+latlng.lng);

      $.getJSON('https://search.mapzen.com/v1/reverse?api_key=mapzen-9gW9cQ&point.lat='+latlng.lat+'&point.lon='+latlng.lng+'&size=1&layers=address&boundary.country=ES', function(data, status, xhr) {
        if(data.features[0] == undefined){
          if(circle != null) {
            map.removeLayer(circle);
          }
          marker.bindPopup('No se han encontrado resultados.').openPopup();
        }else{
          marker.bindPopup(data.features[0].properties.label).openPopup();
          if(data.features[0].properties.locality != null){
            if(circle != null) {
              map.removeLayer(circle);
            }
            circle = L.circle([latlng.lat, latlng.lng], data.features[0].properties.distance*1000).addTo(map);
            drawnItems.addLayer(circle);
            console.log('Número '+data.features[0].properties.housenumber+', Calle '+data.features[0].properties.street+', Localidad '+data.features[0].properties.locality+', CP '+data.features[0].properties.postalcode+', Pais '+data.features[0].properties.country+', Distancia '+data.features[0].properties.distance*1000+' m, Exacto a '+data.features[0].properties.confidence);
          }else{
            if(circle != null) {
              map.removeLayer(circle);
            }
            circle = L.circle([latlng.lat, latlng.lng], data.features[0].properties.distance*1000).addTo(map);
            drawnItems.addLayer(circle);
            console.log('Número '+data.features[0].properties.housenumber+', Calle '+data.features[0].properties.street+', Localidad '+data.features[0].properties.localadmin+', Pais '+data.features[0].properties.country+', Distancia '+data.features[0].properties.distance*1000+' m, Exacto a '+data.features[0].properties.confidence);
          }
          //alert(data.features[0].properties.label);
        }
      });
    }
  }

</script>

{% endblock %}